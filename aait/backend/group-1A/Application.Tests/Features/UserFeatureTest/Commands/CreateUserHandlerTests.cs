using Application.Contracts;
using Application.DTO.UserDTO.DTO;
using Application.Exceptions;
using Application.Features.UserFeature.Handlers.Commands;
using Application.Features.UserFeature.Requests.Commands;
using Application.Tests.Features.UserFeatureTests.Mocks;
using AutoMapper;
using Moq;
using Shouldly;
using SocialSync.Domain.Entities;

namespace Application.Tests.Features.UserFeatureTests.Commands
{
    public class CreateUserHandlerTests
    {
        private readonly Mock<IUserRepository> _mockUserRepository;
        private readonly Mock<IMapper> _mockMapper;

        public CreateUserHandlerTests()
        {
            _mockUserRepository = UserRepositoryMock.GetRepository();
            _mockMapper = new Mock<IMapper>();
        }

        [Fact]
        public async Task CreateUserHandler_ValidUserData_CreatesUserSuccessfully()
        {
            // Arrange
            var handler = new CreateUserHandler(_mockMapper.Object, _mockUserRepository.Object);

            var validUserCommand = new CreateUserCommand
            {
                NewUserData = new UserCreateDTO
                {
                    Id = 3, // This will typically be generated by the database. However, for mock purposes, we can set it.
                    Username = "AliceCooper123",
                    Email = "alice.cooper@example.com",
                    Password = "AliceSecurePass123"
                }
            };

            var mappedUser = new User
            {
                Id = validUserCommand.NewUserData.Id,
                Username = validUserCommand.NewUserData.Username,
                Email = validUserCommand.NewUserData.Email,
                Password = validUserCommand.NewUserData.Password
                // Add other properties if User entity has more properties than UserCreateDTO
            };

            _mockMapper.Setup(m => m.Map<User>(It.IsAny<UserCreateDTO>())).Returns(mappedUser);

            // Act
            var response = await handler.Handle(validUserCommand, new CancellationToken());

            // Assert
            response.ShouldNotBeNull();
            response.Success.ShouldBeTrue();
            response.Message.ShouldBe("User created successfully");
        }

        [Fact]
        public async Task CreateUserHandler_InvalidUserData_ReturnsFailureResponse()
        {
            // Arrange
            var handler = new CreateUserHandler(_mockMapper.Object, _mockUserRepository.Object);

            var invalidUserCommand = new CreateUserCommand
            {
                NewUserData = new UserCreateDTO
                {
                    // Intentionally providing invalid data
                    Id = 0, // An ID of 0 is not valid
                    Username = "",
                    Email = "",
                    Password = ""
                }
            };

            var mappedUser = new User
            {
                Id = invalidUserCommand.NewUserData.Id,
                Username = invalidUserCommand.NewUserData.Username,
                Email = invalidUserCommand.NewUserData.Email,
                Password = invalidUserCommand.NewUserData.Password
            };

            _mockMapper.Setup(m => m.Map<User>(It.IsAny<UserCreateDTO>())).Returns(mappedUser);

            // Act & Assert
            var exception = await Assert.ThrowsAsync<BadRequestException>(() => handler.Handle(invalidUserCommand, new CancellationToken()));

            // Checking if the exception message is as expected
            exception.Message.ShouldBe("Unable to create a user");
        }

    }
}
